// Generated by CoffeeScript 1.10.0
var ErrorFormater, Joi, MagicRoute, Router, _, applyMiddleware, applyRoute, csrf, csrfProtection, express, init, schemaValidMiddleware;

_ = require('lodash');

Joi = require('joi');

express = require('express');

csrf = require('csurf');

csrfProtection = csrf({
  cookie: true
});

Router = express.Router();

ErrorFormater = function(code, descs) {
  var desc;
  desc = '';
  if (_.isArray(descs.details)) {
    _.each(descs.details, function(it) {
      return desc += it.message;
    });
  } else if (_.isString(descs)) {
    desc = descs;
  }
  return {
    error_no: code,
    error_desc: 'parameter error: ' + desc
  };
};

init = function(routerConfigs) {
  var i, len, results, route;
  results = [];
  for (i = 0, len = routerConfigs.length; i < len; i++) {
    route = routerConfigs[i];
    results.push(applyRoute(route));
  }
  return results;
};

schemaValidMiddleware = function(schema, schemaValidatePos, errorCode) {
  if (schemaValidatePos == null) {
    schemaValidatePos = 'query';
  }
  if (errorCode == null) {
    errorCode = '-10001';
  }
  return function(req, res, next) {
    var validRet;
    validRet = Joi.validate(req[schemaValidatePos], schema(req, Joi), {
      allowUnknown: true
    });
    if (validRet != null ? validRet.error : void 0) {
      res.status(400).send(MagicRoute.ErrorFormater(errorCode, validRet.error));
      return;
    }
    return next();
  };
};

applyRoute = function(routeConfig) {
  var i, index, len, ref, results, url;
  if (routeConfig.disable) {
    return;
  }
  if (!routeConfig.url || (!_.isString(routeConfig.url) && !_.isArray(routeConfig.url)) || !routeConfig.middleware || (!_.isString(routeConfig.middleware) && !_.isArray(routeConfig.middleware))) {
    throw new Error('routeConfig invalid error!');
  }
  if (routeConfig.method == null) {
    routeConfig.method = 'get';
  }
  routeConfig.method = routeConfig.method.toLowerCase();
  if (routeConfig.schemaValidatePos == null) {
    routeConfig.schemaValidatePos = 'query';
  }
  if (routeConfig.enableCsruf == null) {
    routeConfig.enableCsruf = true;
  }
  if (routeConfig.disable == null) {
    routeConfig.disable = false;
  }
  if (_.isString(routeConfig.url)) {
    routeConfig.url = [routeConfig.url];
  }
  if (_.isString(routeConfig.middleware)) {
    routeConfig.middleware = [routeConfig.middleware];
  }
  ref = routeConfig.url;
  results = [];
  for (index = i = 0, len = ref.length; i < len; index = ++i) {
    url = ref[index];
    if (index === 0) {
      if (routeConfig.enableCsruf) {
        applyMiddleware(url, routeConfig.method, csrfProtection);
      }
      if (_.isFunction(routeConfig.schema)) {
        applyMiddleware(url, routeConfig.method, schemaValidMiddleware(routeConfig.schema, routeConfig.schemaValidatePos, routeConfig.errorCode));
      }
    }
    results.push(applyMiddleware(url, routeConfig.method, routeConfig.middleware));
  }
  return results;
};

applyMiddleware = function(url, method, middlewares) {
  var i, len, mw, results;
  if (_.isArray(middlewares)) {
    results = [];
    for (i = 0, len = middlewares.length; i < len; i++) {
      mw = middlewares[i];
      if (_.isString(mw)) {
        results.push(Router[method](url, require(mw)));
      } else if (_.isFunction(mw)) {
        results.push(Router[method](url, mw));
      } else {
        results.push(console.warn("Router load " + url + " unused!"));
      }
    }
    return results;
  } else if (_.isFunction(middlewares)) {
    return Router[method](url, middlewares);
  } else {
    return console.warn("invalid Router load " + url + "!");
  }
};

MagicRoute = function(config) {
  init(config);
  return Router;
};

MagicRoute.ErrorFormater = ErrorFormater;

module.exports = MagicRoute;
